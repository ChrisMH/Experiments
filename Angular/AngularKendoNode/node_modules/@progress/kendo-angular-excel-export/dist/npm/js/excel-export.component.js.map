{"version":3,"sources":["webpack:///webpack/bootstrap 951fd2904c6982ee54e0?e3ae******","webpack:///external \"@angular/core\"?73d1*****","webpack:///./src/excel-export.component.ts","webpack:///external \"@progress/kendo-file-saver\"","webpack:///external \"@progress/kendo-angular-l10n\"","webpack:///external \"./ooxml/workbook\"","webpack:///external \"./columns/column-base\""],"names":[],"mappings":"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","file":"src/excel-export.component.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 951fd2904c6982ee54e0","module.exports = require(\"@angular/core\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@angular/core\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 7 8","import { Component, ContentChildren, Input, QueryList, Inject, Optional } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { workbookOptions, toDataURL, isWorkbookOptions } from './ooxml/workbook';\nimport { WorkbookOptions } from '@progress/kendo-ooxml';\nimport { CellOptions } from './ooxml/cell-options.interface';\nimport { ExcelExportData } from './excel-export-data';\nimport { ColumnBase } from './columns/column-base';\n\n/**\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\n@Component({\n    exportAs: 'kendoExcelExport',\n    selector: 'kendo-excelexport',\n    template: ``\n})\nexport class ExcelExportComponent {\n\n    /**\n     * Specifies the file name of the file exported to Excel.\n     * @default \"Export.xlsx\"\n     */\n    @Input()\n    public fileName: string = 'Export.xlsx';\n\n    /**\n     * Enables or disables the filtering for columns in the Excel file.\n     */\n    @Input()\n    public filterable: boolean;\n\n    /**\n     * The creator of the workbook.\n     */\n    @Input()\n    public creator?: string;\n\n    /**\n     * The date on which the workbook is created. Defaults to `new Date()`.\n     */\n    @Input()\n    public date?: Date;\n\n    /**\n     * If set to `true`, the content will be forwarded to `proxyURL` even if the browser supports the saving of files locally.\n     */\n    @Input()\n    public forceProxy: boolean;\n\n    /**\n     * The URL of the server-side proxy which will stream the file to the end user.\n     * A proxy is used when the browser is not capable of saving files locally. For example, Internet Explorer 9 and earlier, and Safari.\n     * The implementation of the server-side proxy has to be done by you.\n     * The proxy receives a POST request with the following parameters in the request body:\n     * - `contentType`&mdash;The MIME type of the file.\n     * - `base64`&mdash;The base-64 encoded file content.\n     * - `fileName`&mdash;The file name, as requested by the caller.\n     *\n     * The proxy is expected to return the decoded file with the **Content-Disposition** header set to `attachment; filename=\"<fileName.xslx>\"`.\n     */\n    @Input()\n    public proxyURL: string;\n\n    /**\n     * The exported data.\n     * If grouped, the data must have the structure described by the [`GroupResult`]({% slug api_kendo-data-query_groupresult_kendouiforangular %}) option of the Kendo UI DataQuery.\n     */\n    @Input()\n    public data: any[];\n\n    /**\n     * The exported data groups.\n     * The groups must be compatible with the [`GroupDescriptor`]({% slug api_kendo-data-query_groupdescriptor_kendouiforangular %}) option of the Kendo UI DataQuery.\n     */\n    @Input()\n    public group: any[];\n\n    /**\n     * The options of the cells that are inserted before the data, group, and footer cells to indicate the group hierarchy if the data is grouped.\n     */\n    @Input()\n    public paddingCellOptions: CellOptions;\n\n    /**\n     * The options of the cells that are inserted before the header cells to align the headers and the column values when the data is grouped.\n     */\n    @Input()\n    public headerPaddingCellOptions: CellOptions;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(ColumnBase, { descendants: true })\n    public columns: QueryList<ColumnBase> = new QueryList<ColumnBase>();\n\n    constructor(@Optional() @Inject(RTL) private rtl?: boolean) {\n        this.saveFile = this.saveFile.bind(this);\n    }\n\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that is to be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions_kendouiforangular %}).\n     */\n    public save(exportData?: any[] | ExcelExportData | WorkbookOptions): void {\n        this.toDataURL(exportData).then(this.saveFile);\n    }\n\n    /**\n     * Returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions_kendouiforangular %}) based on the specified columns and data.\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n    public workbookOptions(exportData?: any[] | ExcelExportData): WorkbookOptions {\n        const currentData = this.getExportData(exportData);\n        const options = workbookOptions({\n            columns: this.columns,\n            data: currentData.data,\n            group: currentData.group,\n            filterable: this.filterable,\n            creator: this.creator,\n            date: this.date,\n            rtl: this.rtl,\n            paddingCellOptions: this.paddingCellOptions,\n            headerPaddingCellOptions: this.headerPaddingCellOptions\n        });\n\n        return options;\n    }\n\n    /**\n     * Returns a promise which will be resolved with the file data URI.\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions_kendouiforangular %}) that are to be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n    public toDataURL(exportData?: any[] | ExcelExportData | WorkbookOptions): Promise<string> {\n        const options = isWorkbookOptions(exportData) ? exportData : this.workbookOptions(exportData);\n\n        return toDataURL(options);\n    }\n\n    protected getExportData(exportData?: ExcelExportData | any[]): ExcelExportData {\n        let result: ExcelExportData;\n\n        if (exportData) {\n            if (Array.isArray(exportData)) {\n                result = {\n                    data: exportData\n                }\n            } else {\n                result = exportData;\n            }\n        } else {\n            result = {\n                data: this.data,\n                group: this.group\n            };\n        }\n\n        return result;\n    }\n\n    protected saveFile(dataURL: string): void {\n        saveAs(dataURL, this.fileName, {\n            forceProxy: this.forceProxy,\n            proxyURL: this.proxyURL\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/excel-export.component.ts","module.exports = require(\"@progress/kendo-file-saver\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@progress/kendo-file-saver\"\n// module id = 14\n// module chunks = 7","module.exports = require(\"@progress/kendo-angular-l10n\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@progress/kendo-angular-l10n\"\n// module id = 15\n// module chunks = 7","module.exports = require(\"./ooxml/workbook\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"./ooxml/workbook\"\n// module id = 16\n// module chunks = 7 9","module.exports = require(\"./columns/column-base\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"./columns/column-base\"\n// module id = 17\n// module chunks = 7 9"],"sourceRoot":""}